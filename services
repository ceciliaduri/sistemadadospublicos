// services/comexstatService.ts
import { cache } from 'react';

const API_BASE = 'https://api-comexstat.mdic.gov.br';
const CACHE_TTL = 3600000; // 1 hora

interface ComexstatRequest {
  flow: 'export' | 'import';
  monthDetail: boolean;
  period: {
    from: string; // YYYY-MM
    to: string;   // YYYY-MM
  };
  filters?: Array<{
    filter: string;
    values: (string | number)[];
  }>;
  details?: string[];
  metrics?: string[];
}

interface ComexstatResponse {
  data: Array<{
    period: string;
    fob: number;
    kg: number;
    country?: string;
    state?: string;
    ncm?: string;
  }>;
  success: boolean;
}

interface FilterOption {
  id: string | number;
  name: string;
}

class ComexStatService {
  private cache = new Map<string, { data: any; timestamp: number }>();

  private async fetchWithCache<T>(url: string, options?: RequestInit): Promise<T> {
    const cacheKey = `${url}-${JSON.stringify(options)}`;
    const cached = this.cache.get(cacheKey);
    
    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
      return cached.data;
    }

    try {
      const response = await fetch(url, {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        ...options,
      });

      if (!response.ok) {
        throw new Error(`API Error: ${response.status} - ${response.statusText}`);
      }

      const data = await response.json();
      this.cache.set(cacheKey, { data, timestamp: Date.now() });
      
      return data;
    } catch (error) {
      console.error('ComexStat API Error:', error);
      throw error;
    }
  }

  // Obter dados gerais de comércio exterior
  async getGeneralData(request: ComexstatRequest): Promise<ComexstatResponse> {
    const url = `${API_BASE}/general?language=pt`;
    
    const defaultRequest: ComexstatRequest = {
      flow: request.flow,
      monthDetail: true,
      period: request.period,
      filters: request.filters || [],
      details: request.details || ['country', 'state'],
      metrics: request.metrics || ['metricFOB', 'metricKG', 'metricStatistic']
    };

    return this.fetchWithCache(url, {
      method: 'POST',
      body: JSON.stringify(defaultRequest),
    });
  }

  // Obter dados por municípios
  async getCitiesData(request: ComexstatRequest): Promise<ComexstatResponse> {
    const url = `${API_BASE}/cities?language=pt`;
    
    return this.fetchWithCache(url, {
      method: 'POST',
      body: JSON.stringify(request),
    });
  }

  // Obter lista de países
  async getCountries(search?: string): Promise<FilterOption[]> {
    const url = `${API_BASE}/tables/countries${search ? `?search=${search}` : ''}`;
    const response = await this.fetchWithCache<{ data: FilterOption[] }>(url);
    return response.data || [];
  }

  // Obter lista de estados
  async getStates(): Promise<FilterOption[]> {
    const url = `${API_BASE}/tables/uf`;
    const response = await this.fetchWithCache<{ data: FilterOption[] }>(url);
    return response.data || [];
  }

  // Obter filtros disponíveis
  async getAvailableFilters(): Promise<string[]> {
    const url = `${API_BASE}/general/filters?language=pt`;
    const response = await this.fetchWithCache<{ data: string[] }>(url);
    return response.data || [];
  }

  // Obter valores para um filtro específico
  async getFilterValues(filter: string): Promise<FilterOption[]> {
    const url = `${API_BASE}/general/filters/${filter}?language=pt`;
    const response = await this.fetchWithCache<{ data: FilterOption[] }>(url);
    return response.data || [];
  }

  // Obter métricas disponíveis
  async getAvailableMetrics(): Promise<string[]> {
    const url = `${API_BASE}/general/metrics?language=pt`;
    const response = await this.fetchWithCache<{ data: string[] }>(url);
    return response.data || [];
  }

  // Obter última atualização
  async getLastUpdate(): Promise<string> {
    const url = `${API_BASE}/general/dates/updated`;
    const response = await this.fetchWithCache<{ data: { updated: string } }>(url);
    return response.data?.updated || '';
  }

  // Calcular métricas agregadas
  processMetrics(data: any[]): {
    totalFOB: number;
    totalKG: number;
    growth: number;
    topCountries: Array<{ name: string; value: number }>;
  } {
    if (!data || data.length === 0) {
      return { totalFOB: 0, totalKG: 0, growth: 0, topCountries: [] };
    }

    const totalFOB = data.reduce((sum, item) => sum + (item.fob || 0), 0);
    const totalKG = data.reduce((sum, item) => sum + (item.kg || 0), 0);
    
    // Calcular crescimento (primeiro vs último)
    const firstValue = data[0]?.fob || 0;
    const lastValue = data[data.length - 1]?.fob || 0;
    const growth = firstValue > 0 ? ((lastValue - firstValue) / firstValue) * 100 : 0;

    // Top países por valor
    const countryTotals = data.reduce((acc, item) => {
      if (item.country) {
        acc[item.country] = (acc[item.country] || 0) + (item.fob || 0);
      }
      return acc;
    }, {} as Record<string, number>);

    const topCountries = Object.entries(countryTotals)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .map(([name, value]) => ({
        name,
        value: Math.round((value / totalFOB) * 100)
      }));

    return { totalFOB, totalKG, growth, topCountries };
  }

  // Limpar cache
  clearCache(): void {
    this.cache.clear();
  }

  // Verificar saúde da API
  async healthCheck(): Promise<boolean> {
    try {
      const response = await fetch(`${API_BASE}/general/dates/years`);
      return response.ok;
    } catch {
      return false;
    }
  }
}

// Instância singleton do serviço
export const comexstatService = new ComexStatService();

// Hook para uso no React com cache
export const useComexStatData = cache(async (request: ComexstatRequest) => {
  return comexstatService.getGeneralData(request);
});

// Utilitários de formatação
export const formatters = {
  currency: (value: number): string => {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'USD',
      notation: 'compact',
      maximumFractionDigits: 1
    }).format(value);
  },

  weight: (value: number): string => {
    return new Intl.NumberFormat('pt-BR', {
      notation: 'compact',
      maximumFractionDigits: 1
    }).format(value) + ' kg';
  },

  percentage: (value: number): string => {
    return `${value.toFixed(1)}%`;
  },

  date: (dateString: string): string => {
    return new Intl.DateTimeFormat('pt-BR', {
      year: 'numeric',
      month: 'short'
    }).format(new Date(dateString + '-01'));
  }
};

export type { ComexstatRequest, ComexstatResponse, FilterOption };
